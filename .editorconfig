# http://EditorConfig.org

#################
# Common Settings
#################

# This file is the top-most EditorConfig file
root = true

# All Files
[*]
charset = utf-8
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true


#########################
# File Extension Settings
#########################

# R Files
[*.r*]
indent_size = 2

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML Configuration Files
[*.{json,xml,yml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# Markdown Files
[*.md]
trim_trailing_whitespace = false

# Web Files
[*.{htm,html,js,ts,css,scss,less}]
indent_size = 2
insert_final_newline = true

# Batch Files
[*.{cmd,bat}]
end_of_line = crlf

# Bash Files
[*.sh]
end_of_line = lf

# JSON Files
[*.{json,json5}]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

[Makefile]
indent_style = tab

[*.{cs,csx,cake}]

##########################################
# Default .NET Code Style Severities
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/configuration-options#scope
##########################################

# Default Severity for all .NET Code Style rules below
dotnet_analyzer_diagnostic.severity = warning

##########################################
# Code Style Rules
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
##########################################

# "this." and "Me." qualifiers
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0003-ide0009
dotnet_style_qualification_for_event = true:warning
dotnet_style_qualification_for_field = true:warning
dotnet_style_qualification_for_method = true:warning
dotnet_style_qualification_for_property = true:warning

# Language keywords instead of framework type names for type references
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0049
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Modifier preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/modifier-preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
csharp_prefer_static_local_function = true:warning
dotnet_style_readonly_field = true:warning
dotnet_style_require_accessibility_modifiers = always:warning

# Parentheses preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0047-ide0048
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:none
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:none
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:none
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:none

# Expression-level preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/expression-level-preferences
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
dotnet_style_namespace_match_folder = true
csharp_style_pattern_local_over_anonymous_function = true:suggestion
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_operator_placement_when_wrapping = end_of_line
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions= true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
# C# 9
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# Null-checking preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/null-checking-preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:warning
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
csharp_style_prefer_null_check_over_type_check = true

# 'var' preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0007-ide0008
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Expression-bodied members
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/expression-bodied-members
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion
csharp_style_expression_bodied_constructors = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
csharp_style_expression_bodied_lambdas = when_on_single_line:suggestion
chsarp_style_expression_bodied_local_functions = when_on_single_line:suggestion
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
csharp_style_expression_bodied_properties = when_on_single_line:suggestion

# Pattern matching preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/pattern-matching-preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
# C# 9
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion

# Code block preferences
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/code-block-preferences
csharp_prefer_braces = when_multiline:suggestion
csharp_prefer_simple_using_statement = true:suggestion

# Unnecessary code rules
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules
csharp_style_unused_value_assignment_preference = discard_variable
dotnet_diagnostic.IDE0059.severity = suggestion

csharp_style_unused_value_expression_statement_preference = discard_variable
dotnet_code_quality_unused_parameters = non_public:suggestion
dotnet_remove_unnecessary_suppression_exclusions = all

# https://github.com/dotnet/format/blob/main/docs/Supported-.editorconfig-options.md#removing-unnecessary-imports
# IDE0005: Using directive is unnecessary.
dotnet_diagnostic.IDE0005.severity = warning

#############################
# .NET Formatting Rules
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules
#############################
dotnet_diagnostic.IDE0055.severity = suggestion

# Organize usings
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#organize-using-directives
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Newline options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#new-line-options
csharp_new_line_before_open_brace = all #Allman
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_between_query_expression_clauses = true

# Indentation Options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#indentation-options
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = flush_left
csharp_indent_switch_labels = true

# Spacing options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#spacing-options
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrap options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#wrap-options
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

# Using directive options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#using-directive-options
csharp_using_directive_placement = outside_namespace

# Namespace options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#namespace-options
csharp_style_namespace_declarations = file_scoped

#########################
# .NET Naming conventions
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules
#########################

# <prefix>.<title>.<propertyName> = <propertyValue>

# <prefix> = dotnet_naming_rule | dotnet_naming_symbols | dotnet_naming_style
# <title> is a descriptive name you choose that associates multiple property settings into a single definition.

# For naming rule (dotnet_naming_rule), specify following properties: symbols, style, severity
# For symbol group (dotnet_naming_symbols), specify following properties: applicable_kinds, applicable_accessibilities, required_modifiers

##########################################
# Styles
##########################################

dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I

dotnet_naming_style.suffix_method_with_async_style.required_suffix = Async

##########################################
# Symbol groups
##########################################

dotnet_naming_symbols.async_method_group.applicable_accessibilities = *
dotnet_naming_symbols.async_method_group.applicable_kinds           = method
dotnet_naming_symbols.async_method_group.required_modifiers         = async

dotnet_naming_symbols.constant_fields_group.applicable_accessibilities = *
dotnet_naming_symbols.constant_fields_group.applicable_kinds           = field
dotnet_naming_symbols.constant_fields_group.required_modifiers         = const

dotnet_naming_symbols.element_group.applicable_accessibilities = *
dotnet_naming_symbols.element_group.applicable_kinds           = namespace, class, enum, struct, delegate, event, method, property, type_parameter

dotnet_naming_symbols.interface_group.applicable_accessibilities = *
dotnet_naming_symbols.interface_group.applicable_kinds           = interface

dotnet_naming_symbols.local_vars_group.applicable_accessibilities = local
dotnet_naming_symbols.local_vars_group.applicable_kinds           = local

dotnet_naming_symbols.other_public_fields_group.applicable_accessibilities = public
dotnet_naming_symbols.other_public_fields_group.applicable_kinds           = field

dotnet_naming_symbols.parameters_group.applicable_accessibilities = *
dotnet_naming_symbols.parameters_group.applicable_kinds           = parameter

dotnet_naming_symbols.private_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.private_fields_group.applicable_kinds           = field

dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly

##########################################
# Naming rules
##########################################

# Async methods use 'Async' suffix
dotnet_naming_rule.async_rule.symbols  = async_method_group
dotnet_naming_rule.async_rule.style    = suffix_method_with_async_style
dotnet_naming_rule.async_rule.severity = warning

# All constant fields must be PascalCase
dotnet_naming_rule.constant_fields_rule.symbols  = constant_fields_group
dotnet_naming_rule.constant_fields_rule.style    = pascal_case_style
dotnet_naming_rule.constant_fields_rule.severity = warning

# Other elements use PascalCase
dotnet_naming_rule.element_rule.symbols  = element_group
dotnet_naming_rule.element_rule.style    = pascal_case_style
dotnet_naming_rule.element_rule.severity = warning

# Interfaces use PascalCase and are prefi`xed with uppercase 'I'
dotnet_naming_rule.interface_rule.symbols` = interface_group
dotnet_naming_rule.interface_rule.style    = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity = warning

# Local variables must be camelCase
dotnet_naming_rule.local_vars_rule.symbols  = local_vars_group
dotnet_naming_rule.local_vars_rule.style    = camel_case_style
dotnet_naming_rule.local_vars_rule.severity = warning

# Method parameters use camelCase
dotnet_naming_rule.parameters_rule.symbols  = parameters_group
dotnet_naming_rule.parameters_rule.style    = camel_case_style
dotnet_naming_rule.parameters_rule.severity = warning

# Public fields are PascalCase
dotnet_naming_rule.other_public_fields_disallowed_rule.symbols  = other_public_fields_group
dotnet_naming_rule.other_public_fields_disallowed_rule.style    = pascal_case_style
dotnet_naming_rule.other_public_fields_disallowed_rule.severity = warning

# Private fields use camelCase
dotnet_naming_rule.private_fields_rule.symbols  = private_fields_group
dotnet_naming_rule.private_fields_rule.style    = camel_case_style
dotnet_naming_rule.private_fields_rule.severity = warning

# All public/protected/protected_internal static readonly fields must be PascalCase
dotnet_naming_rule.public_protected_static_readonly_fields_rule.symbols  = public_protected_static_readonly_fields_group
dotnet_naming_rule.public_protected_static_readonly_fields_rule.style    = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_rule.severity = warning

##########################################
# Roslynator Analyzers
# https://github.com/JosefPihrt/Roslynator
##########################################

# RCS0003: Add blank line after using directive list
dotnet_diagnostic.RCS0003.severity = suggestion

# RCS0009: Add blank line between declaration and documentation comment
dotnet_diagnostic.RCS0009.severity = suggestion

# RCS0010: Add blank line between declarations
dotnet_diagnostic.RCS0010.severity = suggestion

# RCS0012: Add blank line between single-line declarations
dotnet_diagnostic.RCS0012.severity = none

# RCS0013: Add blank line between single-line declarations of different kind
dotnet_diagnostic.RCS0013.severity = suggestion

# RCS0015: Add/remove blank line between using directives
roslynator_blank_line_between_using_directives = separate_groups
dotnet_diagnostic.RCS0015.severity = suggestion

# RCS0016: Put attribute list on its own line
dotnet_diagnostic.RCS0016.severity = suggestion

# RCS0020: Format accessor's braces on a single line or multiple lines
roslynator_accessor_braces_style = single_line_when_expression_is_on_single_line

# RCS0021: Format block's braces on a single line or multiple lines
roslynator_block_braces_style = single_line_when_empty

# RCS0024: Add new line after switch label
dotnet_diagnostic.RCS0024.severity = suggestion

# RCS0027: Place new line after/before binary operator
roslynator_binary_operator_new_line = before

# RCS0028: Place new line after/before '?:' operator
roslynator_conditional_operator_new_line = before

# RCS0031: Add new line before enum member
dotnet_diagnostic.RCS0031.severity = suggestion

# RCS0032: Place new line after/before arrow token
roslynator_arrow_token_new_line = after

# RCS0034: Add new line before type parameter constraint
dotnet_diagnostic.RCS0034.severity = suggestion

# RCS0039: Remove new line before base list
dotnet_diagnostic.RCS0039.severity = suggestion

# RCS0041: Remove new line between 'if' keyword and 'else' keyword
dotnet_diagnostic.RCS0041.severity = suggestion

# RCS0042: Put auto-accessors on a single line
dotnet_diagnostic.RCS0042.severity = suggestion

# RCS0043: Format accessor's braces on a single line when expression is on single line
dotnet_diagnostic.RCS0043.severity = suggestion

# RCS0046: Use spaces instead of tab
dotnet_diagnostic.RCS0046.severity = suggestion

# RCS0051: Add/remove new line before 'while' in 'do' statement
roslynator_new_line_before_while_in_do_statement = false

# RCS0054: Fix formatting of a call chain
dotnet_diagnostic.RCS0054.severity = suggestion

# RCS0058: Normalize whitespace at the end of a file
roslynator_new_line_at_end_of_file = true
dotnet_diagnostic.RCS0058.severity = suggestion

# RCS0059: Place new line after/before null-conditional operator
roslynator_null_conditional_operator_new_line = before

# RCS1001: Add braces (when expression spans over multiple lines)
dotnet_diagnostic.RCS1001.severity = suggestion

# RCS1003: Add braces to if-else (when expression spans over multiple lines)
dotnet_diagnostic.RCS1003.severity = suggestion

# RCS1004: Remove braces from if-else
dotnet_diagnostic.RCS1004.severity = suggestion

# RCS1005: Simplify nested using statement
dotnet_diagnostic.RCS1005.severity = suggestion

# RCS1006: Merge 'else' with nested 'if'
dotnet_diagnostic.RCS1006.severity = suggestion

# RCS1013: Use predefined type
dotnet_diagnostic.RCS1013.severity = suggestion

# RCS1014: Use explicitly/implicitly typed array
roslynator_array_creation_type_style = implicit_when_type_is_obvious

# RCS1015: Use nameof operator
dotnet_diagnostic.RCS1015.severity = suggestion

# RCS1031: Remove unnecessary braces
dotnet_diagnostic.RCS1031.severity = suggestion

# RCS1040: Remove empty 'else' clause
dotnet_diagnostic.RCS1040.severity = suggestion

# RCS1051: Parenthesize condition of conditional expression
roslynator_conditional_operator_condition_parentheses_style = omit_when_condition_is_single_token

# RCS1052: Declare each attribute separately
dotnet_diagnostic.RCS1052.severity = none

# RCS1071: Remove redundant base constructor call
dotnet_diagnostic.RCS1071.severity = warning

# Use string.Empty instead of ""
roslynator.RCS1078.invert = true

# RCS1145: Remove redundant 'as' operator
dotnet_diagnostic.RCS1145.severity = warning

# https://github.com/JosefPihrt/Roslynator/issues/384
# RCS1165: Unconstrained type parameter checked for null
dotnet_diagnostic.RCS1165.severity = none

# RCS1168: Parameter name differs from base name
dotnet_diagnostic.RCS1168.severity = suggestion

# RCS1176: Use 'var' instead of explicit type (when the type is not obvious)
dotnet_diagnostic.RCS1176.severity = suggestion

# RCS1177: Use 'var' instead of explicit type (in foreach)
dotnet_diagnostic.RCS1177.severity = suggestion

# RCS1182: Remove redundant base interface
dotnet_diagnostic.RCS1182.severity = suggestion

# RCS1207: Convert anonymous function to method group
dotnet_diagnostic.RCS1207.severity = suggestion

# RCS1208: Reduce 'if' nesting
dotnet_diagnostic.RCS1208.severity = none

# RCS1211: Remove unnecessary 'else'
dotnet_diagnostic.RCS1211.severity = suggestion

# RCS1231: Make parameter ref read-only
dotnet_diagnostic.RCS1231.severity = suggestion

# RCS1238: Avoid nested ?: operators
dotnet_diagnostic.RCS1238.severity = suggestion

# RCS1241: Implement non-generic counterpart
dotnet_diagnostic.RCS1241.severity = warning

# RCS1248: Use pattern matching to check for null (or vice versa)
dotnet_diagnostic.RCS1248.severity = suggestion

##########################################
# .NET Code Quality Rules
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/
##########################################

## Design rules

# CA1000: Do not declare static members on generic types
dotnet_code_quality.CA1000.api_surface = all
dotnet_diagnostic.CA1000.severity = none

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = suggestion

# CA1005: Avoid excessive parameters on generic types
dotnet_code_quality.CA1005.api_surface = all
dotnet_diagnostic.CA1005.severity = none

# CA1014: Mark assemblies with CLSCompliantAttribute
# https://github.com/dotnet/roslyn/issues/37876#issuecomment-738042719
dotnet_diagnostic.CA1014.severity = none

# CA1017: Mark assemblies with ComVisibleAttribute
dotnet_diagnostic.CA1017.severity = none

# CA1021: Avoid out parameters
dotnet_diagnostic.CA1021.severity = none

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = suggestion

# CA1028: Enum storage should be Int32
dotnet_diagnostic.CA1028.severity = none

# CA1040: Avoid empty interfaces
dotnet_code_quality.CA1040.api_surface = all
dotnet_diagnostic.CA1040.severity = none

# CA1045: Do not pass types by reference
dotnet_diagnostic.CA1045.severity = none

# https://github.com/dotnet/roslyn-analyzers/issues/3218
# If NRT enabled, gives false positives
dotnet_diagnostic.CA1062.severity = none

## Globalization rules

# CA1303: Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = none

# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = suggestion

## Maintainability rules

# CA1501: Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = suggestion

## Naming rules

# CA1715: Identifiers should have correct prefix
dotnet_code_quality.CA1715.exclude_single_letter_type_parameters = true

# CA1724: Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = none

## Performance rules

# CA1802: Use Literals Where Appropriate
dotnet_code_quality.CA1802.required_modifiers = none

## Usage rules

# CA1801: Review unused parameters
# This rule has been deprecated in favor of IDE0060.
dotnet_diagnostic.CA1802.severity = none
